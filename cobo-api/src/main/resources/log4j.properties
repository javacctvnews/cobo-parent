#日志级别level：OFF、fatal、error、warn、Info、debug、all

#日志的输出地址：appender。
#	语法：log4j.rootLogger=level,appenderName1,appenderName2,...
#	或：log4j.rootCategroy=level,appenderName1,appenderName2,...

#log4j.category.*：是对自定义类的设置，可以对类、包和工程单独设置，默认情况下，子类要继承父类的全部设置
#   非root logger的语法为：log4j.logger.loggerName1 = level, appenderName1, appenderName2, ...
#   或：log4j.category.loggerName1 = level, appenderName1, appenderName2, ...

#缺省的logger，记录所有的包的信息输出，日志级别：info，日志输出地：stdout,LogFile,ErrorFile
log4j.rootLogger=info,stdout,LogFile,ErrorFile


#对根类的设置，以下所有的类都将继承这些设置，除特别说明外
log4j.rootLogger=info,stdout,allLogFile


#将com.javacctvnews日志输出到projectLogFile文件夹中
log4j.logger.com.javacctvnews=info,projectLogFile

#框架日志控制
log4j.logger.org.springframework=warn,stdout

#ConversionPattern参数的格式含义 
# 格式名 含义 
# %c 输出日志信息所属的类的全名 
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-MM-dd HH:mm:ss }，输出类似：2002-10-18 22：10：28 
# %f 输出日志信息所属的类的类名 
# %l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行 
# %m 输出代码中指定的信息，如log(message)中的message 
# %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n” 
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推 
# %r 输出自应用启动到输出该日志信息所耗费的毫秒数 
# %t 输出产生该日志事件的线程名

#输出日志到控制台
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=Log4j:[%t]%-3p[%d{yyyy-MM-dd HH:mm:ss}] %5p %c{1}:%L - %m%n

# sql打印
log4j.logger.com.javacctvnews=TRACE
